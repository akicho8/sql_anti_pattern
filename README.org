* 一目で思い出すためのSQLアンチパターン覚え書き

   | 名前                   | 何がダメか                   | 解決方法                   | 備考                      |
   |------------------------+------------------------------+----------------------------+---------------------------|
   | [[https://github.com/akicho8/sql_anti_pattern#信号無視][信号無視]]               | 1つのカラムにIDを複数格納    | 中間テーブルを持つ         |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#複数列属性][複数列属性]]             | カラムを連番で増やす         | 適切なリレーション         | xxx2 が出てきたら危険     |
   | [[https://github.com/akicho8/sql_anti_pattern#闇雲インデックス][闇雲インデックス]]       | インデックスを張りまくる     | 絞る                       |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#幻のファイル][幻のファイル]]           | カラムにファイルパスを格納   | blob                       |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#読み取り可能パスワード][読み取り可能パスワード]] | パスワードを格納             | ハッシュ化                 |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#31のフレーバー][31のフレーバー]]         | 限定する値を列定義(enum)     | 別テーブルで管理           |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#ランダムセレクション][ランダムセレクション]]   | order rand()                 | offset rand(count)         |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#丸め誤差][丸め誤差]]               | float                        | decimal                    | 緯度経度でありがち        |
   | [[https://github.com/akicho8/sql_anti_pattern#sql%E3%82%A4%E3%83%B3%E3%82%B8%E3%82%A7%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3][SQLインジェクション]]    | where("id = #{params[:id]}") | where(id: params[:id])     |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#疑似キー潔癖症][疑似キー潔癖症]]         | 欠番を埋めたがる             | 埋めたがらない             |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#貧者のサーチエンジン][貧者のサーチエンジン]]   | like '%foo%'                 | FULLTEXT等                 |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#魔法の豆][魔法の豆]]               | モデルに書かない             | 書く                       |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#ポリモルフィック][ポリモルフィック]]       | 整合性が揺らぐ・柔軟性がない | 使わない                   | 便利な面も多い            |
   | [[https://github.com/akicho8/sql_anti_pattern#外部キー嫌い][外部キー嫌い]]           | foreign_key: false           | foreign_key: true          | テストではまる要因        |
   | [[https://github.com/akicho8/sql_anti_pattern#メタデータ大増殖][メタデータ大増殖]]       | テーブルを連番で増やす       | 増やさない                 |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#曖昧なグループ][曖昧なグループ]]         | group by A で select B       | Bが必要な理由を考える      |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#スパゲッティクエリ][スパゲッティクエリ]]     | 複雑すぎるSQL                | シンプルにする             | 設計から見直そう          |
   | [[https://github.com/akicho8/sql_anti_pattern#外交特権][外交特権]]               | SQL言語だけ特別扱いする      | しない                     | DB管理者ってなに？        |
   | [[https://github.com/akicho8/sql_anti_pattern#臭いものに蓋][臭いものに蓋]]           | エラーをないがしろにする     | しない                     |                           |
   | [[https://github.com/akicho8/sql_anti_pattern#恐怖のUnknown][恐怖のUnknown]]          | NULL許可                     | NOT NULL                   | NULL の代用で -1 とかダメ |
   | [[https://github.com/akicho8/sql_anti_pattern#素朴な木][素朴な木]]               | 連携は parent_id だけ        | [[naive_trees_nested_set.rb][入れ子集合]]との併用がよさげ | 一長一短ある              |
   | [[https://github.com/akicho8/sql_anti_pattern#暗黙の列][暗黙の列]]               | SELECT *                     | 明示指定                   |                           |
   |------------------------+------------------------------+----------------------------+---------------------------|

   アンチパターンだと決め付けるのではなく一長一短を知ることが大切。

** [[jaywalking.rb][信号無視]]

#+BEGIN_SRC ruby
create_table :users do |t|
  t.string :friends_ids
end

user = User.create!
user.friends_ids = 2.times.collect { User.create!.id }.join(",")
user.friends_ids # => "2,3"
#+END_SRC

** [[multi_column_attribute.rb][複数列属性]]

#+BEGIN_SRC ruby
create_table :articles do |t|
  t.string :comment1
  t.string :comment2
  t.string :comment3
end
#+END_SRC

** [[index_shotgun.rb][闇雲インデックス]]

#+BEGIN_SRC ruby
create_table :users do |t|
  t.string :name, :index => true
  t.timestamps    :index => true

  t.index [:name, :created_at, :updated_at]
end
#+END_SRC

** [[phantom_files.rb][幻のファイル]]

#+BEGIN_SRC ruby
user = User.create!(:file_path => "path/to/file.png")
Pathname(user.file_path).exist? # => false
#+END_SRC

** [[readable_passwords.rb][読み取り可能パスワード]]

#+BEGIN_SRC ruby
user = User.create!(:password => "foo")
user.password_before_type_cast  # => "foo"
#+END_SRC

** [[thirty_one_flavors.rb][31のフレーバー]]

#+BEGIN_SRC ruby
create_table :users do |t|
  t.column :foo, "ENUM('a', 'b')"
end

User.create!(:foo => "a") # => #<User id: 1, foo: "a">
User.create!(:foo => "b") # => #<User id: 2, foo: "b">
#+END_SRC

** [[random_selection.rb][ランダムセレクション]]

#+BEGIN_SRC ruby
User.order("random()").take
#+END_SRC

   ↓

#+BEGIN_SRC ruby
User.offset(rand(User.count)).take
#+END_SRC

** [[rounding_errors.rb][丸め誤差]]

#+BEGIN_SRC ruby
create_table :users do |t|
  t.column :c1, :float
  t.column :c2, :double
  t.column :c3, "DECIMAL(65, 30)"
end

v = 5.5555555555555555555555555555555555555
user = User.create!(:c1 => v, :c2 => v, :c3 => v).reload
user.c1.to_d # => 0.555556e1
user.c2.to_d # => 0.555555555555556e1
user.c3.to_d # => 0.5555555555555555e1
#+END_SRC

** [[sql_injection.rb][SQLインジェクション]]

#+BEGIN_SRC ruby
id = "0 or name = 'admin'"
User.where("id = #{id}").take # => #<User id: 2, name: "admin">
#+END_SRC

** [[pseudokey_neat_freak.rb][疑似キー潔癖症]]

2 と 4 の間を埋めたがる

#+BEGIN_SRC ruby
User.pluck(:id)                 # => [2, 4]
sql = "SELECT id + 1 FROM users WHERE (id + 1) NOT IN (SELECT id FROM users) LIMIT 1"
id = ActiveRecord::Base.connection.select_value(sql) # => 3
User.create!(:id => id)         # => #<User id: 3>
#+END_SRC

** [[poor_mans_search_engine][貧者のサーチエンジン]]

#+BEGIN_SRC ruby
Article.where(["body like ?", "%日本%"])
#+END_SRC

** [[magic_beans][魔法の豆]]

user.rb がこれだけで一方の users_controller.rb は1000行ある。

#+BEGIN_SRC ruby
class User < ActiveRecord::Base
end
#+END_SRC

** [[id_required][とりあえずID]]

Railsの流儀からは逸れるが Profile#user_id が一意であれば Profile#id は余計だという考え方もあるようだ。

#+BEGIN_SRC ruby
create_table :profiles, :id => false do |t|
  t.belongs_to :user
end

class User < ActiveRecord::Base
  has_one :profile
end

class Profile < ActiveRecord::Base
  self.primary_key = :user_id
  belongs_to :user
end

user = User.create!                 # => #<User id: 1>
user.create_profile!(:user => user) # => #<Profile user_id: 1>
#+END_SRC

** [[polymorphic_associations][ポリモルフィック]]

#+BEGIN_SRC ruby
create_table :users do |t|
end
create_table :comments do |t|
  t.belongs_to :commentable, polymorphic: true
end

class User < ActiveRecord::Base
  has_many :comments, as: :commentable
end

# あらゆるレコードにコメントできるモデル
class Comment < ActiveRecord::Base
  has_many :comments, as: :commentable # 自分に対してもコメントできるようにするため
  belongs_to :commentable, polymorphic: true
end

user = User.create!             # => #<User id: 1>
comment = user.comments.create! # => #<Comment id: 1, commentable_type: "User", commentable_id: 1>
comment.comments.create!        # => #<Comment id: 2, commentable_type: "Comment", commentable_id: 1>
comment = user.comments.create! # => #<Comment id: 3, commentable_type: "User", commentable_id: 1>
comment.comments.create!        # => #<Comment id: 4, commentable_type: "Comment", commentable_id: 3>

tt Comment
# >> +----+------------------+----------------+
# >> | id | commentable_type | commentable_id |
# >> +----+------------------+----------------+
# >> |  1 | User             |              1 |
# >> |  2 | Comment          |              1 |
# >> |  3 | User             |              1 |
# >> |  4 | Comment          |              3 |
# >> +----+------------------+----------------+
#+END_SRC

** [[keyless_entry.rb][外部キー嫌い]]

Article#user_id に意図しない値が入らないように心配するなら foreign_key: true にしときましょうということ。

#+BEGIN_SRC ruby
create_table :articles do |t|
  t.belongs_to :user, :foreign_key => true
end

Article.create!(:user_id => 0) rescue $! # => #<ActiveRecord::InvalidForeignKey: Mysql2::Error: Cannot add or update a child row: a foreign key constraint fails (`__test__`.`articles`, CONSTRAINT `fk_rails_3d31dad1cc` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)): INSERT INTO `articles` (`user_id`) VALUES (0)>
# >>    (10.8ms)  CREATE TABLE `articles` (`id` int AUTO_INCREMENT PRIMARY KEY, `user_id` int,  INDEX `index_articles_on_user_id`  (`user_id`), CONSTRAINT `fk_rails_3d31dad1cc`
# >> FOREIGN KEY (`user_id`)
# >>   REFERENCES `users` (`id`)
# >> ) ENGINE=InnoDB
#+END_SRC

** [[metadata_tribble.rb][メタデータ大増殖]]

   NG

#+BEGIN_SRC ruby
(2000...2100).each do |year|
  create_table "users_#{year}" do |t|
  end
end

User.table_name = :users_2016
User.create!                    # => #<User id: 1>

User.table_name = :users_2017
User.create!                    # => #<User id: 1>
#+END_SRC

   速度が問題なら次のようにパーティション分割する。ただAR経由でこの処理を書こうとすると大変。

#+BEGIN_SRC sql
CREATE TABLE users (
 id INTEGER AUTO_INCREMENT NOT NULL,
 created_at DATETIME,
 PRIMARY KEY (id, created_at)
);

ALTER TABLE users PARTITION BY HASH (YEAR(created_at)) PARTITIONS 3;
EXPLAIN PARTITIONS SELECT * FROM users;
#+END_SRC

|----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------|
| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |
|----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------|
|  1 | SIMPLE      | users | p0,p1,p2   | index | NULL          | PRIMARY |       9 | NULL |    1 |   100.00 | Using index |
|----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------|

** [[ambiguous_groups.rb][曖昧なグループ]]

同じ name のレコードは複数あったかもしれないのに、どうして id が特定できたのか。
MAX ではなく AVG を使って集約したと考えてみると、id が特定できた違和感を得やすい。

#+BEGIN_SRC ruby
sql "SELECT id, AVG(score) FROM users GROUP BY name" # => [{"id"=>2, "AVG(score)"=>1.5}, {"id"=>4, "AVG(score)"=>3.5}]
#+END_SRC

MySQL の場合はエラーにしてくれる。

#+BEGIN_SRC ruby
#<ActiveRecord::StatementInvalid: Mysql2::Error: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column '__test__.users.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by: SELECT id, AVG(score) FROM users GROUP BY name>
#+END_SRC

** [[spaghetti_query.rb][スパゲッティクエリ]]

   - JOINの数に累乗して行が増えていくので気をつけろ
   - 行数は COUNT ^ (JOIN数 + 1) になる
   - 無理に一つにまとめようとすると破綻
   - なるべくシンプルに

#+BEGIN_SRC ruby
sql <<~EOT                      # => [{"COUNT(*)"=>2}]
SELECT COUNT(*) FROM favorites
EOT
sql <<~EOT                      # => [{"COUNT(*)"=>4}]
SELECT COUNT(*) FROM favorites
LEFT JOIN favorites USING (user_id)
EOT
sql <<~EOT                      # => [{"COUNT(*)"=>8}]
SELECT COUNT(*) FROM favorites
LEFT JOIN favorites USING (user_id)
LEFT JOIN favorites USING (user_id)
EOT
sql <<~EOT                      # => [{"COUNT(*)"=>16}]
SELECT COUNT(*) FROM favorites
LEFT JOIN favorites USING (user_id)
LEFT JOIN favorites USING (user_id)
LEFT JOIN favorites USING (user_id)
EOT
#+END_SRC

** [[see_no_evil.rb][臭いものに蓋]]

#+BEGIN_SRC ruby
User.count rescue 0
#+END_SRC

** [[fear_of_the_unknown.rb][恐怖のUnknown]]

NULL が入っているせいで年齢がでない

#+BEGIN_SRC ruby
user = User.create!
"#{user.age}歳"                 # => "歳"
#+END_SRC

じゃあ必須にしよう。でも未入力の場合もあるので NULL のかわりに -1 を入れよう

#+BEGIN_SRC ruby
user = User.create!(:age => -1)
"#{user.age != -1 ? user.age : "?"}歳" # => "?歳"
#+END_SRC

20歳の人を登録して平均を出そうとすると

#+BEGIN_SRC ruby
User.create!(:age => 20)
User.average(:age).to_i                       # => 9
User.where.not(:age => -1).average(:age).to_i # => 20
#+END_SRC

余計に面倒なことになっている。

そしてしばらくして疑問に思う。-1って何だろうと。

** 素朴な木

|------------+------------------+--------+--------------+------|
| 名前       | 方法             | 良い   | 悪い         | 併用 |
|------------+------------------+--------+--------------+------|
| [[naive_trees.rb][素朴]]       | parent のみ      | 美しい | 遅い         |      |
| [[naive_trees_path_enumeration.rb][経路列挙]]   | path に '1/2/3/' |        | ダサい       | ○   |
| [[naive_trees_nested_set.rb][入れ子集合]] | 子の範囲を保持   | 美しい | 再計算が面倒 | ◎   |
| [[naive_trees_closure_table.rb][閉包]]       | 1:* の別テーブル | 富豪的 | 面倒すぎる   | △   |
|------------+------------------+--------+--------------+------|

「素朴な木」は兄妹や親へのアクセスなどがとてもやりやすいので、その利点は残しておいて、他の方法を考慮するなら、完全に移行するのではなく、併用がいい気がする。

** [[implicit_columns.rb][暗黙の列]]

#+BEGIN_SRC ruby
Benchmark.ms { User.all.to_a         } # => 2.9799999902024865
Benchmark.ms { User.select(:id).to_a } # => 0.4229999613016844
Benchmark.ms { User.pluck(:id)       } # => 0.2049999893642962
#+END_SRC
